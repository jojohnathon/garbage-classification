import cv2
import cvzone
import time
from ultralytics import YOLO
from cvzone.SerialModule import SerialObject


# Initialize webcam
cap = cv2.VideoCapture(1)
cap.set(3, 1280)  # Width
cap.set(4, 720)   # Height


# Initialize Arduino communication
arduino = SerialObject()


# Load YOLO model
model = YOLO("../Yolo-Weights/yolov8n.pt")


# Object class names
classNames = ["person", "bicycle", "car", "motorbike", "aeroplane", "bus", "train", "truck", "boat",
             "traffic light", "fire hydrant", "stop sign", "parking meter", "bench", "bird", "cat",
             "dog", "horse", "sheep", "cow", "elephant", "bear", "zebra", "giraffe", "backpack", "umbrella",
             "handbag", "tie", "suitcase", "frisbee", "skis", "snowboard", "sports ball", "kite", "baseball bat",
             "baseball glove", "skateboard", "surfboard", "tennis racket", "bottle", "wine glass", "cup",
             "fork", "knife", "spoon", "bowl", "banana", "apple", "sandwich", "orange", "broccoli",
             "carrot", "hot dog", "pizza", "donut", "cake", "chair", "sofa", "pottedplant", "bed",
             "diningtable", "toilet", "tvmonitor", "laptop", "mouse", "remote", "keyboard", "cell phone",
             "microwave", "oven", "toaster", "sink", "refrigerator", "book", "clock", "vase", "scissors",
             "teddy bear", "hair drier", "toothbrush"]


metal = ["fork", "knife", "spoon", "bowl", "laptop", "mouse", "remote", "keyboard", "cell phone", "clock", "scissors"]


# Frame timing
prev_frame_time = 0


while True:
   success, img = cap.read()
   if not success:
       break


   # Object detection with YOLO
   results = model(img, stream=True)
   detected = False


   for r in results:
       boxes = r.boxes
       for box in boxes:
           # Bounding box coordinates
           x1, y1, x2, y2 = map(int, box.xyxy[0])
           w, h = x2 - x1, y2 - y1
           cvzone.cornerRect(img, (x1, y1, w, h))


           # Confidence and class
           conf = round(float(box.conf[0]), 2)
           cls = int(box.cls[0])


           cvzone.putTextRect(img, f'{classNames[cls]} {conf}', (max(0, x1), max(35, y1)), scale=1, thickness=1)
           detected = True


   # Send data to Arduino
   arduino.sendData([1] if detected and classNames[cls] in metal else [0])


   # Calculate FPS
   new_frame_time = time.time()
   fps = 1 / (new_frame_time - prev_frame_time)
   prev_frame_time = new_frame_time
   print(f'FPS: {fps:.2f}')


   # Display image
   cv2.imshow("Image", img)
   if cv2.waitKey(1) & 0xFF == ord('q'):
       break

